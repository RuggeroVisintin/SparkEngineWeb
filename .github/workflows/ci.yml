name: Continuos Integration
on:
    push:
      branches:
        - main
    workflow_dispatch:
    pull_request:

jobs:
    build:
      name: Build
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
  
        - name: install
          run: npm ci
        
        - name: eslint
          run: npm run lint
          
        - name: build
          run: npm run build
    test_unit:
      name: Unit Tests
      runs-on: ubuntu-latest
  
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
  
        - name: install
          run: npm ci
  
        - name: test
          run: npm run test:ci

        - name: issue badge
          run: |
            mkdir -p .github/pages/badges
            npx make-coverage-badge --report-path .coverage/coverage-summary.json --output-path .github/pages/badges/coverage.badge.svg
          
        - uses: actions/upload-artifact@v4
          with:
            name: coverage-badge-artifact
            path: .github/pages/badges/coverage.badge.svg
    test_perf:
      name: Performance Tests
      runs-on: ubuntu-latest
      permissions:
        pull-requests: write

      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
  
        - name: install
          run: npm ci
  
        - name: test
          id: perf_test
          run: |
            npm run test:perf:ci

        - name: attach report
          if: github.event.number
          uses: thollander/actions-comment-pull-request@v2
          with:
            pr_number: ${{ github.event.number }}
            filePath: .benchmark
            mode: recreate
            comment_tag: benchmark_comment
            create_if_not_exists: true
    test_visual_main:
      name: Visual Tests (Main Branch)
      runs-on: ubuntu-latest
      if: github.ref_name == 'main'
      container:
        image: mcr.microsoft.com/playwright:v1.54.2-jammy
      permissions:
        contents: read
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
        - name: Install dependencies
          run: npm ci
        - name: Build project
          run: npm run build
        - name: Run Visual Tests
          run: |
            if [ ! -d "test/visual" ] || [ "$(find test/visual -name "*.png" 2>/dev/null | wc -l)" -eq 0 ]; then
              echo "No baselines found - running tests with baseline generation, skipping"
            else
              echo "Baselines exist - running in CI mode"
              npm run test:visual:ci
            fi
    generate_baselines:
      name: Generate Visual Baselines
      runs-on: ubuntu-latest
      if: github.ref_name == 'main'
      needs: [test_visual_main]
      container:
        image: mcr.microsoft.com/playwright:v1.54.2-jammy
      permissions:
        contents: read
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
        - name: Install dependencies
          run: npm ci
        - name: Build project
          run: npm run build
        - name: Generate/Update baselines
          run: |
            echo "Generating fresh baselines for artifact storage..."
            npm run test:visual:update-baseline
        - name: Log baseline generation
          run: |
            echo "✅ Visual baselines generated successfully from main branch"
            echo "Baseline files:"
            find test/visual -name "*.png" | head -10
        - name: Upload baselines
          uses: actions/upload-artifact@v4
          with:
            name: visual-baselines
            path: test/visual/
            retention-days: 7
    test_visual:
      name: Visual Regression Tests
      timeout-minutes: 5
      runs-on: ubuntu-latest
      if: github.event_name == 'pull_request'
      container:
        image: mcr.microsoft.com/playwright:v1.54.2-jammy
      permissions:
        pull-requests: write
        contents: read
        pages: write
        id-token: write
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
        - name: Download baselines from main
          uses: dawidd6/action-download-artifact@v6
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            workflow: ci.yml
            branch: main
            name: visual-baselines
            path: test/visual/
            if_no_artifact_found: fail
        - name: Install dependencies
          run: npm ci
        - name: Build project
          run: npm run build
        - name: Verify baselines exist
          run: |
            if [ ! -d "test/visual" ] || [ "$(find test/visual -name "*.png" | wc -l)" -eq 0 ]; then
              echo "❌ No visual baselines found!"
              echo ""
              echo "This means either:"
              echo "1. No baselines have been generated on main branch yet"
              echo "2. The baseline artifacts have expired (older than 7 days)"
              echo ""
              echo "🔧 To fix this:"
              echo "1. Go to Actions tab: https://github.com/${{ github.repository }}/actions"
              echo "2. Find the latest successful workflow run on main branch"
              echo "3. Click 'Re-run jobs' to regenerate baselines"
              echo "4. Once baselines are generated, re-run this PR workflow"
              echo ""
              exit 1
            else
              baseline_count=$(find test/visual -name "*.png" | wc -l)
              echo "✅ Found $baseline_count baseline images from main branch"
              echo "Baseline files:"
              find test/visual -name "*.png" | head -5
            fi
        - name: Run Visual Tests
          id: visual_tests
          continue-on-error: true
          run: npm run test:visual:ci
        - name: Upload Visual Test Images to GitHub Pages
          if: steps.visual_tests.outcome == 'failure' && github.event.number
          run: |
            # Create directory structure for this PR
            mkdir -p pages-deploy/visual-tests/pr-${{ github.event.number }}
            
            # Copy all test result images
            if [ -d "test-results" ]; then
              cp -r test-results/* pages-deploy/visual-tests/pr-${{ github.event.number }}/
            fi
            
            # Create index.html for easy browsing
            cat > pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Visual Test Results - PR #${{ github.event.number }}</title>
                <style>
                    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                    .test-result { margin-bottom: 40px; padding: 20px; border: 1px solid #e1e4e8; border-radius: 6px; }
                    .images { display: flex; gap: 20px; flex-wrap: wrap; }
                    .image-container { text-align: center; }
                    img { max-width: 300px; border: 1px solid #ddd; }
                    h1 { color: #d73a49; }
                    h2 { color: #586069; }
                </style>
            </head>
            <body>
                <h1>🎨 Visual Test Results for PR #${{ github.event.number }}</h1>
                <p><a href="https://github.com/${{ github.repository }}/pull/${{ github.event.number }}">← Back to Pull Request</a></p>
            EOF
            
            # Add each test result to the HTML
            find pages-deploy/visual-tests/pr-${{ github.event.number }} -name "*-diff.png" | while read -r diff_image; do
                test_name=$(basename "$(dirname "$diff_image")" | sed 's|pages-deploy/visual-tests/pr-${{ github.event.number }}/||')
                if [ -n "$test_name" ]; then
                    echo "<div class='test-result'>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                    echo "<h2>❌ $test_name</h2>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                    echo "<div class='images'>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                    
                    # Add diff image
                    diff_rel=$(echo "$diff_image" | sed "s|pages-deploy/visual-tests/pr-${{ github.event.number }}/||")
                    echo "<div class='image-container'><h3>🔴 Difference</h3><img src='$diff_rel' alt='Diff'></div>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                    
                    # Add actual image if exists
                    actual_image=$(echo "$diff_image" | sed 's/-diff\.png$/-actual.png/')
                    if [ -f "$actual_image" ]; then
                        actual_rel=$(echo "$actual_image" | sed "s|pages-deploy/visual-tests/pr-${{ github.event.number }}/||")
                        echo "<div class='image-container'><h3>📷 Actual</h3><img src='$actual_rel' alt='Actual'></div>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                    fi
                    
                    # Add expected image if exists
                    expected_image=$(echo "$diff_image" | sed 's/-diff\.png$/-expected.png/')
                    if [ -f "$expected_image" ]; then
                        expected_rel=$(echo "$expected_image" | sed "s|pages-deploy/visual-tests/pr-${{ github.event.number }}/||")
                        echo "<div class='image-container'><h3>✅ Expected</h3><img src='$expected_rel' alt='Expected'></div>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                    fi
                    
                    echo "</div></div>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
                fi
            done
            
            echo "</body></html>" >> pages-deploy/visual-tests/pr-${{ github.event.number }}/index.html
            
        - name: Setup Pages for Visual Tests
          if: steps.visual_tests.outcome == 'failure' && github.event.number
          uses: actions/configure-pages@v5
          
        - name: Upload Visual Test Images to Pages
          if: steps.visual_tests.outcome == 'failure' && github.event.number
          uses: actions/upload-pages-artifact@v3
          with:
            name: visual-test-pages
            path: ./pages-deploy
            
        - name: Deploy Visual Test Images to GitHub Pages
          if: steps.visual_tests.outcome == 'failure' && github.event.number
          uses: actions/deploy-pages@v4
          with:
            artifact_name: visual-test-pages
            
        - name: Create Visual Test Summary with Images
          if: steps.visual_tests.outcome == 'failure' && github.event.number
          run: |
            echo "## 🎨 Visual Regression Test Results" > visual-summary.md
            echo "" >> visual-summary.md
            echo "❌ **Visual tests failed!** Some screenshots don't match the expected baselines." >> visual-summary.md
            echo "" >> visual-summary.md
            echo "### 📸 Visual Differences Found:" >> visual-summary.md
            echo "" >> visual-summary.md
            
            # Find all diff images and embed them
            if [ -d "test-results" ]; then
              diff_count=$(find test-results -name "*-diff.png" | wc -l)
              echo "Found $diff_count visual difference(s)" >> visual-summary.md
              echo "" >> visual-summary.md
              
              # Add each test result with images
              find test-results -name "*-diff.png" | head -3 | while read -r diff_image; do
                test_name=$(basename "$(dirname "$diff_image")")
                echo "#### ❌ $test_name" >> visual-summary.md
                echo "" >> visual-summary.md
                
                # GitHub Pages URLs for images
                base_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/visual-tests/pr-${{ github.event.number }}"
                
                # Start HTML table for side-by-side images
                echo "<table><tr>" >> visual-summary.md
                
                # Add diff image
                diff_filename=$(basename "$diff_image")
                echo "<td align=\"center\"><strong>🔴 Difference</strong><br/><img src=\"$base_url/$test_name/$diff_filename\" width=\"250\"/></td>" >> visual-summary.md
                
                # Add actual image if exists
                actual_image=$(echo "$diff_image" | sed 's/-diff\.png$/-actual.png/')
                if [ -f "$actual_image" ]; then
                  actual_filename=$(basename "$actual_image")
                  echo "<td align=\"center\"><strong>📷 Actual</strong><br/><img src=\"$base_url/$test_name/$actual_filename\" width=\"250\"/></td>" >> visual-summary.md
                fi
                
                # Add expected image if exists
                expected_image=$(echo "$diff_image" | sed 's/-diff\.png$/-expected.png/')
                if [ -f "$expected_image" ]; then
                  expected_filename=$(basename "$expected_image")
                  echo "<td align=\"center\"><strong>✅ Expected</strong><br/><img src=\"$base_url/$test_name/$expected_filename\" width=\"250\"/></td>" >> visual-summary.md
                fi
                
                echo "</tr></table>" >> visual-summary.md
                echo "" >> visual-summary.md
                echo "---" >> visual-summary.md
                echo "" >> visual-summary.md
              done
              
              if [ $diff_count -gt 3 ]; then
                echo "**Note:** Only showing first 3 failures inline. " >> visual-summary.md
                echo "" >> visual-summary.md
              fi
              
              echo "### 🌐 View All Results" >> visual-summary.md
              echo "" >> visual-summary.md
              echo "**[� Interactive Visual Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/visual-tests/pr-${{ github.event.number }})** - View all test results with side-by-side comparisons" >> visual-summary.md
            else
              echo "⚠️ No test-results directory found. Check the test execution." >> visual-summary.md
            fi
            
            echo "" >> visual-summary.md
            echo "### 🛠️ Next Steps:" >> visual-summary.md
            echo "1. **Review the visual differences** shown above" >> visual-summary.md
            echo "2. **If changes are intentional**: The baselines will be updated when this PR is merged to main" >> visual-summary.md
            echo "3. **If changes are bugs**: Fix the rendering issue in your code" >> visual-summary.md
            echo "4. **Re-run tests** to verify the fix" >> visual-summary.md
            
        - name: Comment PR with Visual Results
          if: steps.visual_tests.outcome == 'failure' && github.event.number
          uses: thollander/actions-comment-pull-request@v2
          with:
            pr_number: ${{ github.event.number }}
            filePath: visual-summary.md
            mode: recreate
            comment_tag: visual_regression_report
            create_if_not_exists: true
            
        - name: Remove Visual Test Comment on Success
          if: steps.visual_tests.outcome == 'success' && github.event.number
          uses: thollander/actions-comment-pull-request@v2
          with:
            pr_number: ${{ github.event.number }}
            message: "Visual tests passed - removing comment"
            mode: delete
            comment_tag: visual_regression_report
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: playwright-report
            path: playwright-report/
            retention-days: 30
        - uses: actions/upload-artifact@v4
          if: steps.visual_tests.outcome == 'failure'
          with:
            name: visual-test-results
            path: test-results/
            retention-days: 30
        - name: Fail job if visual tests failed
          if: steps.visual_tests.outcome == 'failure'
          run: |
            echo "❌ Visual tests failed!"
            echo "Check the visual report and artifacts for details."
            exit 1
    publish:
      name: Publish
      timeout-minutes: 2
      runs-on: ubuntu-latest
      permissions: 
        contents: write
        pull-requests: write
        pages: write
        id-token: write
      steps:
        - uses: googleapis/release-please-action@v4
          id: release
          with:
            # this assumes that you have created a personal access token
            # (PAT) and configured it as a GitHub action secret named
            # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
            token: ${{ secrets.GITHUB_TOKEN }}
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
        - uses: actions/download-artifact@master
          with:
            name: coverage-badge-artifact
            path: .github/pages/badges/coverage.badge.svg
        - name: install
          run: npm ci
        - name: build web bundle
          run: npm run build
        - name: build lib
          run: npm run build:lib
        - name: upload release artifact
          if: ${{ steps.release.outputs.release_created }}
          env: 
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            tar -czvf "${{ steps.release.outputs.tag_name }}-jsbundle.tar.gz" -C dist/jsbundle .
            tar -czvf "${{ steps.release.outputs.tag_name }}-lib.tar.gz" -C dist/lib .
            gh release upload ${{ steps.release.outputs.tag_name }} "${{ steps.release.outputs.tag_name }}-jsbundle.tar.gz"
            gh release upload ${{ steps.release.outputs.tag_name }} "${{ steps.release.outputs.tag_name }}-lib.tar.gz"
        - name: build docs
          id: docs
          if: ${{ steps.release.outputs.prs_created != true || steps.release.outputs.releases_created == true }}
          run: |
            npm run build:docs
            mkdir -p .github/pages/
            cp -r docs/tsdoc/* .github/pages/
            echo "docs_created=true" >> "$GITHUB_OUTPUT"
        - name: Setup Pages
          if: ${{ steps.docs.outputs.docs_created }}
          uses: actions/configure-pages@v5
        - name: upload docs artifact
          if: ${{ steps.docs.outputs.docs_created }}
          uses: actions/upload-pages-artifact@v3
          with: 
            path: ".github/pages/"
        - name: deploy docs artifact
          if: ${{ steps.docs.outputs.docs_created }}
          uses: actions/deploy-pages@v4
      needs: [test_unit, test_visual_main, generate_baselines, build]
      if: github.ref_name == 'main'

        
        
