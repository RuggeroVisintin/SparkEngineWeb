name: Visual Tests (Reusable)
on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number'
        required: false
        type: string
      ref:
        description: 'Git ref to test'
        required: false
        type: string
        default: ${{ github.sha }}
      event_name:
        description: 'Event name for conditional logic'
        required: false
        type: string
        default: ${{ github.event_name }}
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number'
        required: true
        type: string
      ref:
        description: 'Git ref to test'
        required: true
        type: string

jobs:
  test_visual:
    name: Visual Tests
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.54.2-jammy
    permissions:
      pull-requests: write
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      # Download updated baselines from sparkbot (if available) or main branch baselines
      - name: Download updated baselines from PR
        id: download_updated_pr_baseline
        continue-on-error: true
        if: inputs.pr_number
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: sparkbot.yml
          name: updated-visual-baseline-pr-${{ inputs.pr_number }}
          path: test-results/visual/
          if_no_artifact_found: ignore

      - name: Download baselines from main (fallback or for PRs)
        if: (inputs.event_name == 'pull_request' && steps.download_updated_pr_baseline.outcome == 'failure')
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: ci.yml
          branch: main
          name: visual-baseline
          path: test-results/visual/
          if_no_artifact_found: fail
          
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build
        
      # Verify baselines exist (only for PRs)
      - name: Verify baselines exist
        if: inputs.pr_number || inputs.event_name == 'pull_request'
        run: |
          if [ ! -d "test-results/visual" ] || [ "$(find test-results/visual -name "*-ci-snapshots" -type d | wc -l)" -eq 0 ]; then
            echo "‚ùå No visual baselines found!"
            echo ""
            echo "This means either:"
            echo "1. No baselines have been generated on main branch yet"
            echo "2. The baseline artifacts have expired (older than 7 days)"
            echo ""
            echo "üîß To fix this:"
            echo "1. Go to Actions tab: https://github.com/${{ github.repository }}/actions?query=branch%3Amain"
            echo "2. Find the latest successful workflow run on main branch"
            echo "3. Click 'Re-run jobs' to regenerate baselines"
            echo "4. Once baselines are generated, re-run this PR workflow"
            echo ""
            exit 1
          else
            baseline_count=$(find test-results/visual -name "*.png" | wc -l)
            echo "‚úÖ Found $baseline_count baseline images from main branch"
            echo "Baseline files:"
            find test-results/visual -name "*.png" | head -5
          fi
          
      # Run visual tests
      - name: Run Visual Tests
        id: visual_tests
        continue-on-error: ${{ inputs.pr_number != '' || inputs.event_name == 'pull_request' }}
        run: |
          if [ "${{ github.ref_name }}" = "main" ] && [ "${{ inputs.pr_number }}" = "" ]; then
            # Main branch: Check if CI baselines exist, skip test if none (first run)
            if [ ! -d "test-results/visual" ] || [ "$(find test-results/visual -name "*-ci-snapshots" -type d 2>/dev/null | wc -l)" -eq 0 ]; then
              echo "No CI baselines found on main - this is the first run, tests will be skipped and baselines generated"
              exit 0
            else
              echo "CI baselines exist on main - running in CI mode"
              npm run test:visual:ci
            fi
          else
            # PR branch: Run tests against downloaded baselines
            echo "Running visual tests against main branch baselines"
            npm run test:visual:ci
          fi
          
      # PR-specific steps for visual test reporting
      - name: Upload Visual Test Images to GitHub Pages
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        run: |
          # Create directory structure for this PR
          mkdir -p pages-deploy/visual-tests/pr-${{ inputs.pr_number }}
          
          # Copy all test result images
          if [ -d "test-results" ]; then
            cp -r test-results/visual/* pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/
          fi
          
          # Create index.html for easy browsing
          cat > pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Visual Test Results - PR #${{ inputs.pr_number }}</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                  .test-result { margin-bottom: 40px; padding: 20px; border: 1px solid #e1e4e8; border-radius: 6px; }
                  .images { display: flex; gap: 20px; flex-wrap: wrap; }
                  .image-container { text-align: center; }
                  img { max-width: 300px; border: 1px solid #ddd; }
                  h1 { color: #d73a49; }
                  h2 { color: #586069; }
              </style>
          </head>
          <body>
              <h1>üé® Visual Test Results for PR #${{ inputs.pr_number }}</h1>
              <p><a href="https://github.com/${{ github.repository }}/pull/${{ inputs.pr_number }}">‚Üê Back to Pull Request</a></p>
          EOF
          
          # Add each test result to the HTML
          find pages-deploy/visual-tests/pr-${{ inputs.pr_number }} -name "*-diff.png" | while read -r diff_image; do
              test_name=$(basename "$(dirname "$diff_image")" | sed 's|pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/||')
              if [ -n "$test_name" ]; then
                  echo "<div class='test-result'>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
                  echo "<h2>‚ùå $test_name</h2>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
                  echo "<div class='images'>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
                  
                  # Add diff image
                  diff_rel=$(echo "$diff_image" | sed "s|pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/||")
                  echo "<div class='image-container'><h3>üî¥ Difference</h3><img src='$diff_rel' alt='Diff'></div>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
                  
                  # Add actual image if exists
                  actual_image=$(echo "$diff_image" | sed 's/-diff\.png$/-actual.png/')
                  if [ -f "$actual_image" ]; then
                      actual_rel=$(echo "$actual_image" | sed "s|pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/||")
                      echo "<div class='image-container'><h3>üì∑ Actual</h3><img src='$actual_rel' alt='Actual'></div>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
                  fi
                  
                  # Add expected image if exists
                  expected_image=$(echo "$diff_image" | sed 's/-diff\.png$/-expected.png/')
                  if [ -f "$expected_image" ]; then
                      expected_rel=$(echo "$expected_image" | sed "s|pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/||")
                      echo "<div class='image-container'><h3>‚úÖ Expected</h3><img src='$expected_rel' alt='Expected'></div>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
                  fi
                  
                  echo "</div></div>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
              fi
          done
          
          echo "</body></html>" >> pages-deploy/visual-tests/pr-${{ inputs.pr_number }}/index.html
          
      - name: Setup Pages for Visual Tests
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        uses: actions/configure-pages@v5
        
      - name: Upload Visual Test Images to Pages
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        uses: actions/upload-pages-artifact@v3
        with:
          name: visual-test-pages
          path: ./pages-deploy
          
      - name: Deploy Visual Test Images to GitHub Pages
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        uses: actions/deploy-pages@v4
        with:
          artifact_name: visual-test-pages
          
      - name: Create Visual Test Summary with Images
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        run: |
          echo "## üé® Visual Regression Test Results" > visual-summary.md
          echo "" >> visual-summary.md
          echo "‚ùå **Visual tests failed!** Some screenshots don't match the expected baselines." >> visual-summary.md
          echo "" >> visual-summary.md
          echo "### üì∏ Visual Differences Found:" >> visual-summary.md
          echo "" >> visual-summary.md
          
          # Find all diff images and embed them
          if [ -d "test-results/visual" ]; then
            diff_count=$(find test-results/visual -name "*-diff.png" | wc -l)
            echo "Found $diff_count visual difference(s)" >> visual-summary.md
            echo "" >> visual-summary.md
            
            # Add each test result with images
            find test-results/visual -name "*-diff.png" | head -3 | while read -r diff_image; do
              test_name=$(basename "$(dirname "$diff_image")")
              echo "#### ‚ùå $test_name" >> visual-summary.md
              echo "" >> visual-summary.md
              
              # GitHub Pages URLs for images
              base_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/visual-tests/pr-${{ inputs.pr_number }}"
              
              # Start HTML table for side-by-side images
              echo "<table><tr>" >> visual-summary.md
              
              # Add diff image
              diff_filename=$(basename "$diff_image")
              echo "<td align=\"center\"><strong>üî¥ Difference</strong><br/><img src=\"$base_url/$test_name/$diff_filename\" width=\"250\"/></td>" >> visual-summary.md
              
              # Add actual image if exists
              actual_image=$(echo "$diff_image" | sed 's/-diff\.png$/-actual.png/')
              if [ -f "$actual_image" ]; then
                actual_filename=$(basename "$actual_image")
                echo "<td align=\"center\"><strong>üì∑ Actual</strong><br/><img src=\"$base_url/$test_name/$actual_filename\" width=\"250\"/></td>" >> visual-summary.md
              fi
              
              # Add expected image if exists
              expected_image=$(echo "$diff_image" | sed 's/-diff\.png$/-expected.png/')
              if [ -f "$expected_image" ]; then
                expected_filename=$(basename "$expected_image")
                echo "<td align=\"center\"><strong>‚úÖ Expected</strong><br/><img src=\"$base_url/$test_name/$expected_filename\" width=\"250\"/></td>" >> visual-summary.md
              fi
              
              echo "</tr></table>" >> visual-summary.md
              echo "" >> visual-summary.md
              echo "---" >> visual-summary.md
              echo "" >> visual-summary.md
            done
            
            if [ $diff_count -gt 3 ]; then
              echo "**Note:** Only showing first 3 failures inline. " >> visual-summary.md
              echo "" >> visual-summary.md
            fi
            
            echo "### üåê View All Results" >> visual-summary.md
            echo "" >> visual-summary.md
            echo "**[üåê Interactive Visual Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/visual-tests/pr-${{ inputs.pr_number }})** - View all test results with side-by-side comparisons" >> visual-summary.md
          else
            echo "‚ö†Ô∏è No test-results directory found. Check the test execution." >> visual-summary.md
          fi
          
          echo "" >> visual-summary.md
          echo "### üõ†Ô∏è Next Steps:" >> visual-summary.md
          echo "1. **Review the visual differences** shown above" >> visual-summary.md
          echo "2. **If changes are intentional**: The baselines will be updated when this PR is merged to main" >> visual-summary.md
          echo "3. **If changes are bugs**: Fix the rendering issue in your code" >> visual-summary.md
          echo "4. **Re-run tests** to verify the fix" >> visual-summary.md
          
      - name: Comment PR with Visual Results
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        uses: thollander/actions-comment-pull-request@v2
        with:
          pr_number: ${{ inputs.pr_number }}
          filePath: visual-summary.md
          mode: recreate
          comment_tag: visual_regression_report
          create_if_not_exists: true
          
      - name: Remove Visual Test Comment on Success
        if: steps.visual_tests.outcome == 'success' && inputs.pr_number
        uses: thollander/actions-comment-pull-request@v2
        with:
          pr_number: ${{ inputs.pr_number }}
          message: "Visual tests passed - removing comment"
          mode: delete
          comment_tag: visual_regression_report
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 3
      - uses: actions/upload-artifact@v4
        if: steps.visual_tests.outcome == 'failure'
        with:
          name: visual-test-results
          path: test-results/visual/
          retention-days: 3
      - name: Fail job if visual tests failed
        if: steps.visual_tests.outcome == 'failure'
        run: |
          echo "‚ùå Visual tests failed!"
          echo "Check the visual report and artifacts for details."
          exit 1
