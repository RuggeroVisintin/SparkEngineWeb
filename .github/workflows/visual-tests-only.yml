name: Visual Tests (Reusable)
on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number'
        required: false
        type: string
      ref:
        description: 'Git ref to test'
        required: false
        type: string
        default: ${{ github.sha }}
      event_name:
        description: 'Event name for conditional logic'
        required: false
        type: string
        default: ${{ github.event_name }}
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number'
        required: true
        type: string
      ref:
        description: 'Git ref to test'
        required: true
        type: string

jobs:
  test_visual:
    name: Visual Tests
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-jammy
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
            # Download updated baselines from sparkbot (if available) or main branch baselines
      - name: Download updated baselines from PR
        id: download_updated_pr_baseline
        continue-on-error: true
        if: inputs.pr_number
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: sparkbot.yml
          name: updated-visual-baseline-pr-${{ inputs.pr_number }}
          path: test-results/visual/snapshots/
          if_no_artifact_found: ignore

      # Verify baselines exist (only for PRs)
      - name: Verify baselines exist
        id: verify_baselines
        continue-on-error: true
        if: inputs.pr_number || inputs.event_name == 'pull_request'
        run: |
          if [ ! -d "test-results/visual/snapshots" ] || [ "$(find test-results/visual/snapshots -name "*-ci-snapshots" -type d | wc -l)" -eq 0 ]; then
            echo "‚ùå No visual baselines found!"
            echo ""
            echo "This means either:"
            echo "1. No baselines have been generated on main branch yet"
            echo "2. The baseline artifacts have expired (older than 7 days)"
            echo ""
            echo "üîß To fix this:"
            echo "1. Go to Actions tab: https://github.com/${{ github.repository }}/actions?query=branch%3Amain"
            echo "2. Find the latest successful workflow run on main branch"
            echo "3. Click 'Re-run jobs' to regenerate baselines"
            echo "4. Once baselines are generated, re-run this PR workflow"
            echo ""
            exit 1
          else
            baseline_count=$(find test-results/visual/snapshots -name "*.png" | wc -l)
            echo "‚úÖ Found $baseline_count baseline images from main branch"
            echo "Baseline files:"
            find test-results/visual/snapshots -name "*.png" | head -5
          fi

      - name: Download baselines from main
        if: (inputs.event_name == 'pull_request' && steps.verify_baselines.outcome == 'failure')
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: ci.yml
          branch: main
          name: visual-baseline
          path: test-results/visual/snapshots/
          if_no_artifact_found: fail
          
      - name: Install dependencies
        run: npm ci
      - name: Build project
        run: npm run build   
          
      # Run visual tests
      - name: Run Visual Tests
        id: visual_tests
        continue-on-error: ${{ inputs.pr_number != '' || inputs.event_name == 'pull_request' }}
        run: |
          if [ "${{ github.ref_name }}" = "main" ] && [ "${{ inputs.pr_number }}" = "" ]; then
            # Main branch: Check if CI baselines exist, skip test if none (first run)
            if [ ! -d "test-results/visual/snapshots" ] || [ "$(find test-results/visual/snapshots -name "*-ci-snapshots" -type d 2>/dev/null | wc -l)" -eq 0 ]; then
              echo "No CI baselines found on main - this is the first run, tests will be skipped and baselines generated"
              echo "GENERATE_BASELINES=true" >> "$GITHUB_OUTPUT"
              exit 0
            else
              echo "CI baselines exist on main - running in CI mode"
              npm run test:visual:ci
            fi
          else
            # PR branch: Run tests against downloaded baselines
            echo "Running visual tests against main branch baselines"
            npm run test:visual:ci
          fi
          
      # Generate baselines on main branch when none exist
      - name: Generate Visual Baselines
        if: steps.visual_tests.outputs.GENERATE_BASELINES == 'true'
        run: |
          echo "üîß Generating fresh baselines for main branch..."
          npm run test:visual:update-baseline
          
      - name: Upload Generated Baselines
        if: steps.visual_tests.outputs.GENERATE_BASELINES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: visual-baseline
          path: test-results/visual/snapshots/
          retention-days: 7
          
      # PR-specific steps for visual test reporting
      - name: Create Visual Test Summary
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        run: |
          echo "## üé® Visual Regression Test Results" > visual-summary.md
          echo "" >> visual-summary.md
          echo "‚ùå **Visual tests failed!** Some screenshots don't match the expected baselines." >> visual-summary.md
          echo "" >> visual-summary.md
          echo "### üì∏ Visual Differences Found:" >> visual-summary.md
          echo "" >> visual-summary.md
          
          # Find all diff images and count them
          if [ -d "test-results/visual/snapshots" ]; then
            diff_count=$(find test-results/visual/snapshots -name "*-diff.png" | wc -l)
            echo "Found $diff_count visual difference(s)" >> visual-summary.md
            echo "" >> visual-summary.md
            
            # List failed tests
            find test-results/visual/snapshots -name "*-diff.png" | while read -r diff_image; do
              test_name=$(basename "$(dirname "$diff_image")")
              echo "- ‚ùå $test_name" >> visual-summary.md
            done
          else
            echo "‚ö†Ô∏è No test-results directory found. Check the test execution." >> visual-summary.md
          fi
          
          echo "" >> visual-summary.md
          echo "### üìä View Detailed Report:" >> visual-summary.md
          echo "Download the \`playwright-report\` artifact from this workflow run to view the detailed visual comparison report." >> visual-summary.md
          echo "" >> visual-summary.md
          echo "### üõ†Ô∏è Next Steps:" >> visual-summary.md
          echo "1. **Download the Playwright report** artifact to review visual differences" >> visual-summary.md
          echo "2. **If changes are intentional**: The baselines will be updated when this PR is merged to main" >> visual-summary.md
          echo "3. **If changes are bugs**: Fix the rendering issue in your code" >> visual-summary.md
          echo "4. **Re-run tests** to verify the fix" >> visual-summary.md
          
      - name: Comment PR with Visual Results
        if: steps.visual_tests.outcome == 'failure' && inputs.pr_number
        uses: thollander/actions-comment-pull-request@v2
        with:
          pr_number: ${{ inputs.pr_number }}
          filePath: visual-summary.md
          mode: recreate
          comment_tag: visual_regression_report
          create_if_not_exists: true
          
      - name: Remove Visual Test Comment on Success
        if: steps.visual_tests.outcome == 'success' && inputs.pr_number
        uses: thollander/actions-comment-pull-request@v2
        with:
          pr_number: ${{ inputs.pr_number }}
          message: "Visual tests passed - removing comment"
          mode: delete
          comment_tag: visual_regression_report
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: test-results/visual/reports/html/
          retention-days: 3
      - uses: actions/upload-artifact@v4
        if: steps.visual_tests.outcome == 'failure'
        with:
          name: visual-test-results
          path: test-results/playwright-output/
          retention-days: 3
      - name: Fail job if visual tests failed
        if: steps.visual_tests.outcome == 'failure'
        run: |
          echo "‚ùå Visual tests failed!"
          echo "Check the visual report and artifacts for details."
          exit 1
